/* css-файл робиться один на весь проект. навіть якщо декілька сторінок */

:root {
  --color-primary-dark: #31261a;
  --color-primary-light: #faf4ea;
  --color-brand-light: #819b57;
  --color-brand-dark: #465929;
}

/* :root - корінь. Вибирає кореневий елемент у index.html - тобто тег <html>. Але вони мають різну специфічність (не сказав яку саме). Тут частіше всього вказують колір, назву та розмір щрифту і тд. Краще будь-який колір заносити у змінну. */

/* h1 {
  border: 4px solid black;
} */

/* вище: селектор: оголошення -- {властивість: значення} -- задає стилі */

.main-title {
  border: 4px solid violet; /* якщо class, то "." -- рекомендований варіант */
}

#main-title {
  border: 4px solid violet; /* якщо id, то "#" -- він частіше використовується для створення якорів для посилань, або для користування через JS */
}

[type-] {
  border: 4px solid violet; /* селектор атрибуту. в цьому випадку "type". стиль застосується до всього, що має "type". зараз це кнопка. також можна конкретизувати. це може бути саме "type='button'" -- але так майже не роблять. найкращий варіант це "class" */
}

/* але саме квадратні дужки використовуються. наприклад, якщо кнопка має "disabled" (неактивна/сіра), то є такий варік: */

/* Base */

body {
  color: var(
    --color-primary-dark
  ); /* тут треба задати домінантний колір тексту */
}

.button- {
  border: 4px solid violet;
}

.button-[disabled] {
  border: 4px solid black;
}

/* тобто, коли кнопка у неактивному стані, то вона має інший стиль */

.main-section- {
  color: blue; /* тут дочірній елемент унаслідує те, що прописано у батьківському (додав у назву "-") */
}

.main-section- > h1 {
  color: blue; /* тут звертаємося до дочірнього h1, який є в батьківському елементі, через > . але, все одно, використувувати "class" -- бажаніше всього. але, все залежить від методології команди */
}

.button {
  color: var(--color-primary-light);
  background-color: var(--color-brand-light);
  border: 2px solid var(--color-brand-light);
  border-radius: 8px;
  cursor: pointer; /* щоб курсор був у вигляді руки (для посилань воно стоїть за дефолтом) */
}

.button:hover {
  /* це і є псевдоклас. зараз при наведенні будуть застосовуватися нові стилі */
  background-color: transparent; /* кнопка стане прозорою */
  color: var(--color-brand-dark);
}

.button:focus {
  /* це і є псевдоклас. зараз при переході через tab або при натисканні будуть застосовуватися нові стилі. частіше використовують для полів ввелення */
  background-color: pink; /* кнопка стане прозорою */
  color: var(--color-brand-dark);
}

/* ще є псевдоклас active. застосовується для задання стилю в момент кліку. але він не часто використовується */

/* КАСКАДНІСТЬ - хто останній, той і виграє. Механізм, який керує кінцевими значеннями властивостей елемента, якщо застосовується кілька css-правил (це повноцінна строчка в css, від назви елемента до закриття фінурних скобок). Якщо до елемента застосовується кілька правил, їх властивості комбінуються. Якщо правила містять однакові властивості з різними значеннями, то вони конфліктують.*/

.buttonn {
  color: brown; /* застосується цей колір тексту, бо він останній (назву змінив) */
}

/* СПЕЦИФІЧНІСТЬ - вага селектора, що обчислюється браузером. Чим вище специфічність, тим вище вага. */

/* Наприклад: */

/* .button.button[type="button"] {
  color: red;
} */

/* Тут більша специфічність, тому будуть застосовуватися ці правила. */

/* Краще прагнути до каскадності */

/* Якщо у селекторі пробіл, то це означає, що елемент лежить всередині елементу: header .button. Якщо б його не було, це означало б, що саме header має клас .button */

/* НАСЛІДУВАННЯ - це механізм, за допомогою якого значення певних
властивостей передаються від предка його нащадкам.

Наслідуються тільки властивості оформлення тексту */

.link {
  color: var(--color-primary-light);
}

.link:hover {
  color: var(--color-brand-light);
}

ul {
  list-style-type: none; /* прибирає точки і цифри у ul. краще прописати зверху */
}

/* Hero Title */
.hero-title {
  color: var(--color-primary-light);
}

.hero-title .accent {
  color: var(--color-brand-light);
}

/* Advantages Section */
.advantages-list {
  color: var(--color-primary-light);
  background-color: var(--color-brand-light);
}

/* Тут були вказані кольори в HEX, але є цікава штука - RGBA. А - це альфа канал, який задає прозорість. 0 - не видно, 1 - видно. Середні значення - 0.5 і тд. */

.section-title {
  color: var(
    --color-primary-dark
  ); /* тут його можна не вказувати, бо у main вже він вказаний */
}

.section-title .accent {
  color: var(--color-brand-dark);
}

/* Зовнішній вигляд CSS-документу повинен бути структурованим. А саме:
Base;
Button;
Link;
Hero Section;
Advantages Section і тд. у вигляді коментарів. */

/* CSS-змінна (кастомні властивості) - це контейнери для значень, створені з метою повторного використання. Спрощують використання значень, що повторюються у файлі. Вкажемо зверху, в самому початку файлу. Пагналі */
